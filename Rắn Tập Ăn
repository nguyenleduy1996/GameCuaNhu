import pygame
import os
from pygame.math import Vector2
import random
pygame.init()

cell_size = 37
cell_number = 20
SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 750
# set framerate
clock = pygame.time.Clock()
FPS = 9
white = 255, 255, 255
red = (136, 8, 8)
BG = white
player = 10
screen = pygame.display.set_mode(
    (cell_number*cell_size, cell_number*cell_size))
imgbg = pygame.image.load('image\BG.png')
pygame.display.set_caption('Rắn Tập Ăn')


def draw_bg(screen):
    screen.blit(imgbg, (0, 0))


# ----------------------------------------------------------------------------------

class SNAKE:
    def __init__(self):
        self.body = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]
        self.direction = Vector2(0, 0)
        self.score = 0
        self.new_block = False
        self.dauthang = pygame.image.load('image\snake1.png')
        self.dautphai = pygame.image.load('image\snake3.png')
        self.daudat = pygame.image.load('image\snake4.png')
        self.dautrai = pygame.image.load('image\snake2.png')
        self.bdi = pygame.image.load('image\snakebody.png')

    def update_head_graphics(self):
        head_relation = self.body[1] - self.body[0]
        if head_relation == Vector2(1, 0):
            self.head = self.dautrai
        elif head_relation == Vector2(-1, 0):
            self.head = self.dautphai
        elif head_relation == Vector2(0, 1):
            self.head = self.dauthang
        elif head_relation == Vector2(0, -1):
            self.head = self.daudat

    def draw_snake(self):
        self.update_head_graphics()

        for index, block in enumerate(self.body):
            x_pos = int(block.x * cell_size)
            y_pos = int(block.y * cell_size)
            block_rect = pygame.Rect(x_pos, y_pos, cell_size, cell_size)

            if index == 0:
                screen.blit(self.head, block_rect)
            elif index == len(self.body) - 1:
                screen.blit(self.bdi, block_rect)
            else:
                screen.blit(self.bdi, block_rect)

    def move_snake(self):
        if self.new_block == True:

            body_copy = self.body[:]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body = body_copy[:]
            self.new_block = False
        else:
            body_copy = self.body[:-1]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body = body_copy[:]

    def add_block(self):
        self.new_block = True
		
    def reset(self):
        self.body = [Vector2(5,10),Vector2(4,10),Vector2(3,10)]
        self.direction = Vector2(0,0)


# ----------------------------------------------------------------------------------


class FRUIT(pygame.sprite.Sprite):
    def __init__(self):

        self.listimg = {1: pygame.image.load('image\egg.png'),
                        2: pygame.image.load('image\watermelon.png'),
                        3: pygame.image.load('image\orange.png')}
        self.random = random.randint(1, 3)
        self.image = self.listimg[1]
        self.radomize()

    def draw_fruit(self):
        fruit_rect = pygame.Rect(
            int(self.pos.x * cell_size), int(self.pos.y * cell_size), cell_size, cell_size)
        screen.blit(self.image, fruit_rect)

    def radomize(self):
        self.x = random.randint(0, cell_number-1)
        self.y = random.randint(0, cell_number-1)
        self.pos = Vector2(self.x, self.y)
        self.random = random.randint(1, 3)
        self.image = self.listimg[self.random]


# ----------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------
# khởi tạo đối tượng
# tạo group
food_group = pygame.sprite.Group()


# ----------------------------------------------------------------------------------
screen_update = pygame.USEREVENT
pygame.time.set_timer(screen_update, 5000)
# ----------------------------------------------------------------------------------
typerun = ''
running = True


class MAIN:
	def __init__(self):
		self.snake = SNAKE()
		self.fruit = FRUIT()

	def update(self):
		self.snake.move_snake()
		self.check_collision()
		self.check_fail()

	def draw_elements(self):
		
		self.fruit.draw_fruit()
		self.snake.draw_snake()
		self.draw_score()

	def check_collision(self):
		if self.fruit.pos == self.snake.body[0]:
			self.fruit.radomize()
			self.snake.add_block()
		

		for block in self.snake.body[1:]:
			if block == self.fruit.pos:
				self.fruit.radomize()

	def check_fail(self):
		if not 0 <= self.snake.body[0].x < cell_number or not 0 <= self.snake.body[0].y < cell_number:
			self.game_over()

		for block in self.snake.body[1:]:
			if block == self.snake.body[0]:
				self.game_over()
		
	def game_over(self):
		self.snake.reset()	

	def draw_score(self):
		score_text = str(len(self.snake.body) - 3)
		score_surface = game_font.render(score_text,True,(56,74,12))
		score_x = int(100)
		score_y = int(100)
		score_rect = score_surface.get_rect(center = (score_x,score_y))
		apple_rect = apple.get_rect(midright = (score_rect.left,score_rect.centery))
		bg_rect = pygame.Rect(apple_rect.left,apple_rect.top,apple_rect.width + score_rect.width + 6,apple_rect.height)

		pygame.draw.rect(screen,(0,209,61),bg_rect)
		screen.blit(score_surface,score_rect)
		screen.blit(score_surface,score_rect)
		
		
		pygame.draw.rect(screen,(56,74,12),bg_rect,2)

pygame.mixer.pre_init(44100,-16,2,512)
pygame.init()
cell_size = 40
cell_number = 20
screen = pygame.display.set_mode((cell_number * cell_size,cell_number * cell_size))
clock = pygame.time.Clock()
apple = pygame.image.load('image\orange.png').convert_alpha()
game_font = pygame.font.Font('Font/PoetsenOne-Regular.ttf', 25)

SCREEN_UPDATE = pygame.USEREVENT
pygame.time.set_timer(SCREEN_UPDATE,150)

main_game = MAIN()

while True:
	draw_bg(screen)
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			pygame.quit()
			
		if event.type == SCREEN_UPDATE:
			main_game.update()
		if event.type == pygame.KEYDOWN:
			if event.key == pygame.K_UP:
				if main_game.snake.direction.y != 1:
					main_game.snake.direction = Vector2(0,-1)
			if event.key == pygame.K_RIGHT:
				if main_game.snake.direction.x != -1:
					main_game.snake.direction = Vector2(1,0)
			if event.key == pygame.K_DOWN:
				if main_game.snake.direction.y != -1:
					main_game.snake.direction = Vector2(0,1)
			if event.key == pygame.K_LEFT:
				if main_game.snake.direction.x != 1:
					main_game.snake.direction = Vector2(-1,0)

	
	main_game.draw_elements()
	pygame.display.update()
	clock.tick(60)